apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: >
      {"apiVersion":"tekton.dev/v1beta1","kind":"Task","metadata":{"annotations":{"tekton.dev/displayName":"Update
      Kustomize Git
      Repository"},"name":"update-kustomize-repo","namespace":"spring-pipeline"},"spec":{"params":[{"description":"URL
      of the Git repository to
      update","name":"gitRepositoryUrl","type":"string"},{"default":"master","description":"Branch
      or Tag to push the update
      to","name":"gitRepositoryRevision","type":"string"},{"default":".","description":"Path
      in the repository to work
      in.","name":"gitPath","type":"string"},{"default":"./deployment-patch.yaml","description":"Name
      of the file to be
      updated","name":"fileName","type":"string"},{"description":"The image to
      be written into the
      YAML","name":"image","type":"string"},{"description":"The image tag to be
      written into the
      YAML","name":"imageTag","type":"string"},{"default":"true","description":"Log
      the commands used during
      execution","name":"verbose","type":"string"}],"steps":[{"image":"alpine/git:v2.26.2","name":"git-checkout","script":"#!/usr/bin/env
      sh\n\nset -eu -o pipefail\n\nif [[ \"$(params.verbose)\" == \"true\" ]] ;
      then\n  set -x\n  echo \"**** Cloning $(params.gitRepositoryUrl) into
      $(pwd)/repository\"\nfi\n\ngit clone \"$(params.gitRepositoryUrl)\"
      $(pwd)/repository\ncd repository\ngit checkout
      \"$(params.gitRepositoryRevision)\"\n","volumeMounts":[{"mountPath":"/workspace/repository","name":"repository"}],"workingDir":"/workspace"},{"image":"alpine/git:v2.26.2","name":"update-yaml","script":"#!/usr/bin/env
      sh\nset -e\n\nif [[ \"$(params.verbose)\" == \"true\" ]] ; then\n  echo
      \"**** Updating $(params.fileName) image to
      $(params.image):$(params.imageTag)\"\nfi\n\nsed -i
      \"s#$(params.image):[a-zA-Z0-9-]\\\\+#$(params.image):$(params.imageTag)#\"
      ./$(params.gitPath)/$(params.fileName)\n","volumeMounts":[{"mountPath":"/workspace/repository","name":"repository"}],"workingDir":"/workspace/repository"},{"image":"alpine/git:v2.26.2","name":"commit-push-changes","script":"#!/usr/bin/env
      sh\nset -e\n\ngit config --global user.email \"tekton@tekton.dev\"\ngit
      config --global user.name \"OpenShift Pipeline\"\ngit add .\ngit commit
      --allow-empty -m \"[OpenShift Pipeline] Updating $(params.fileName) image
      to $(params.image):$(params.imageTag)\"\ngit push origin
      \"$(params.gitRepositoryRevision)\"\n","volumeMounts":[{"mountPath":"/workspace/repository","name":"repository"}],"workingDir":"/workspace/repository"}],"volumes":[{"emptyDir":{},"name":"repository"}]}}
    tekton.dev/displayName: Update Kustomize Git Repository
  name: update-kustomize-repo
  namespace: spring-pipeline
spec:
  params:
    - description: URL of the Git repository to update
      name: gitRepositoryUrl
      type: string
    - default: master
      description: Branch or Tag to push the update to
      name: gitRepositoryRevision
      type: string
    - default: .
      description: Path in the repository to work in.
      name: gitPath
      type: string
    - default: deployment-patches.yaml
      description: Name of the file to be updated
      name: fileName
      type: string
    - description: The image to be written into the YAML
      name: image
      type: string
    - description: The image tag to be written into the YAML
      name: imageTag
      type: string
    - default: 'true'
      description: Log the commands used during execution
      name: verbose
      type: string
  steps:
    - image: 'alpine/git:v2.26.2'
      name: git-checkout
      resources: {}
      script: |
        #!/usr/bin/env sh

        set -eu -o pipefail

        if [[ "$(params.verbose)" == "true" ]] ; then
          set -x
          echo "**** Cloning $(params.gitRepositoryUrl) into $(pwd)/repository"
        fi

        git clone "$(params.gitRepositoryUrl)" $(pwd)/repository
        cd repository
        git checkout "$(params.gitRepositoryRevision)"
      volumeMounts:
        - mountPath: /workspace/repository
          name: repository
      workingDir: /workspace
    - image: 'alpine/git:v2.26.2'
      name: update-yaml
      resources: {}
      script: >
        #!/usr/bin/env sh 

        set -e

        if [[ "$(params.verbose)" == "true" ]] ; then
          echo "**** Updating $(params.fileName) image to $(params.image):$(params.imageTag)"
        fi

        sed -i
        "s#$(params.image):[a-zA-Z0-9-]\\+#$(params.image):$(params.imageTag)#"
        ./$(params.gitPath)/$(params.fileName)
      volumeMounts:
        - mountPath: /workspace/repository
          name: repository
      workingDir: /workspace/repository
    - image: 'alpine/git:v2.26.2'
      name: commit-push-changes
      resources: {}
      script: >
        #!/usr/bin/env sh

        set -e 

        git config --global user.email "tekton@tekton.dev"  

        git config --global user.name "OpenShift Pipeline" 

        git add .

        git commit -m "[OpenShift Pipeline] Updating $(params.fileName) image to
        $(params.image):$(params.imageTag)"

        git push origin "$(params.gitRepositoryRevision)"
      volumeMounts:
        - mountPath: /workspace/repository
          name: repository
      workingDir: /workspace/repository
  volumes:
    - emptyDir: {}
      name: repository